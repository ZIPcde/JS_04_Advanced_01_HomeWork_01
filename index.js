console.log("Задание 1///////////");
// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = {
    albums: [
        {
            title: "Сквозь Землю",
            artist: "Мельница",
            year: "2004"
        },
        {
            title: "Черный Обелиск",
            artist: "Кипелов",
            year: "1990"
        },
        {
            title: "Антология",
            artist: "Ария",
            year: "2003"
        }
    ],
    [Symbol.iterator]: function() {
        let index = 0;
        const albums = this.albums;

        return {
            next: function() {
                if (index < albums.length) {
                    return { value: albums[index++], done: false };
                } else {
                    return { done: true };
                }
            }
        };
    }
};

for (const album of musicCollection) {
    console.log(`${album.title} - ${album.artist} (${album.year})`);
}

///////////////////////////////////////////////////////////////////

console.log("Задание 2///////////");
// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const chefsSpecialization = new Map([
    ["Виктор", "Пицца"],
    ["Ольга", "Суши"],
    ["Дмитрий", "Десерты"]
]);

const dishesAndChefs = new Map([
    ["Пицца Маргарита", "Виктор"],
    ["Пицца Пепперони", "Виктор"],
    ["Суши Филадельфия", "Ольга"],
    ["Суши Калифорния", "Ольга"],
    ["Тирамису", "Дмитрий"],
    ["Чизкейк", "Дмитрий"]
]);

const orders = new Map();

function addOrder(client, dish) {
    if (orders.has(client)) {
        orders.get(client).add(dish);
    } else {
        const newOrder = new Set();
        newOrder.add(dish);
        orders.set(client, newOrder);
    }
}

addOrder({name: "Алексей"}, "Пицца Пепперони");
addOrder({name: "Алексей"}, "Тирамису");
addOrder({name: "Мария"}, "Суши Калифорния");
addOrder({name: "Мария"}, "Пицца Маргарита");
addOrder({name: "Ирина"}, "Чизкейк");

orders.forEach((order, client) => {
    console.log(`Заказ клиента ${client.name}: ${[...order]}`);
});

chefsSpecialization.forEach((specialization, chef) => {
    console.log(`${chef} специализируется на: ${specialization}`);
});
